# Install zplug
if [[ ! -d ~/.zplug ]]; then
    git clone https://github.com/zplug/zplug ~/.zplug
    source ~/.zplug/init.zsh && zplug update --self
fi
source ~/.zplug/init.zsh

zplug "plugins/git",            from:oh-my-zsh
zplug "plugins/aws",            from:oh-my-zsh
zplug "plugins/fasd",           from:oh-my-zsh
zplug "plugins/jira",           from:oh-my-zsh
zplug "plugins/mvn",            from:oh-my-zsh
zplug "plugins/sbt",            from:oh-my-zsh
zplug "plugins/scala",          from:oh-my-zsh
zplug "plugins/vagrant",        from:oh-my-zsh
zplug "plugins/docker",         from:oh-my-zsh
zplug "plugins/pip",            from:oh-my-zsh
zplug "robbyrussell/oh-my-zsh", use:"lib/*.zsh" 
zplug "themes/robbyrussell",    from:oh-my-zsh

zplug 'zplug/zplug', hook-build:'zplug --self-manage'   # Make zplug manage itself

# Install plugins if there are plugins that have not been installed
if ! zplug check --verbose; then
    printf "Install? [y/N]: "
    if read -q; then
        echo; zplug install
    fi
fi

# Source plugins and add commands to $PATH
zplug load

# use Vim as a default editor
export EDITOR='vim'
export VISUAL="vim"

# some installation scripts assume that bash is being used and modify only .bash_profile
[ -f ~/.bash_profile ] && source ~/.bash_profile

# local configuration
[ -f ~/.zshrc.local ] && source ~/.zshrc.local

# pull and rebase all repositories you can list within current dir
alias rg-git-pull-rebase-all="ls | xargs -I % sh -xc 'cd % && git diff-index --quiet HEAD -- && git pull --rebase'"

if [[ ! $TERM =~ screen ]]; then
    exec tmux new-session -A -s main
fi

if `command -v gpg-agent >/dev/null 2>&1` ; then
    # Since GPG 2.1, gpg-agent auto-starts on demand (https://www.gnupg.org/faq/whats-new-in-2.1.html#autostart)
    # On MacOs it's still v2.0
    GPG_VERSION=`gpg-agent --version 2>&1 >/dev/null | grep gpg-agent | grep -oE '[0-9]+\.[0-9]+'`
    if [ `echo "$GPG_VERSION < 2.1" | bc` -eq 1 ]; then
        # Start gpg-agent or use existing agent. Requires gpg-agent and pinentry-mac.
        if test -f ~/.gnupg/.gpg-agent-info -a -n "$(pgrep gpg-agent)"; then
            source ~/.gnupg/.gpg-agent-info
            export GPG_AGENT_INFO
            GPG_TTY=$(tty)
            export GPG_TTY
        else
            eval $(gpg-agent --daemon --write-env-file ~/.gnupg/.gpg-agent-info)
        fi
    fi
fi
